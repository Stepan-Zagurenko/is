package pack; /*Пакет (package) — это некий контейнер, который используется для того, чтобы изолировать имена классов. 
pack - название пакета */

import java.awt.*;
import java.awt.event.*;
/*	java. - Все стандартные классы, поставляемые с системой Java, хранятся в пакете java.
java.awt  - подключение пакета awt, содержащего базовые графические функции:GridLayout, BorderLayout и т.д.
"*"-включение всех элементов библиотеки awt */	
import javax.swing.*;
/*	Импортируем: 
javax.* — стандартные расширения.(Стандартные расширения (standard extensions) — это пакеты или наборы пакетов Java)
Swing - Библиотека графического интерфейса (конкретный пакет), В отличие от java.awt, javax.swing имеет более гибкую 
систему управления и более широкий набор функций
"*"-включение всех элементов библиотеки Swing (jbutton,jpanel,jlabel и т.д.)
"."(точка) используется для выделения элементов из ссылки на объект.
*/
import javax.swing.border.*;//библиотека необходимая для того, чтобы установить отступы

public class index extends JFrame{
	/*	(Public) - поля и методы класса Index доступны для всех других объектов и классов. 
	зарезервированное слово class - говорит транслятору, что мы собираемся описать новый класс Index.
	Класс наследует функции элемента JFrame, который определён в стандартной библиотеке awt.
	 JFrame - само окно. JFrame содержит в себе всё необходимое для создания и функционирования окна программы - мы 
	 используем его методы в своей программе. { }-описание класса располагается между фигурными скобками. 
	*/
	
	private static final long serialVersionUID = 1L;
	public static index frame = new index(); /* Index() - это установка компонентов (панель вкладок) на JFrame. 
	(Public) - означает что фрейм Index можно вызвать из любого файла который лежит в пакете pack.
	static позволяет определять статические методы. Это такие методы, которые являются общими для класса, а не для
	отдельного объекта этого класса. Также они могут работать лишь со статическими полями класса.К статическим методам 
	и переменным можно обращаться через имя класса*/
	
	public static void main(String[] args) { /*  
		Модификатор доступа public означает, что метод main(String[] args)виден и доступен любому классу. 
		static позволяет определять статические методы. Это такие методы, которые являются общими для класса, а не для
		отдельного объекта этого класса. Также они могут работать лишь со статическими полями класса.К статическим методам 
		и переменным можно обращаться через имя класса.
		void означает, что метод main(String[] args)не возвращает данных в программу, которая его вызвала, 
		а просто выводит на экран строку.
		В методе main слова String[] args означают,что этот может получать массив объектов с типом String, т.е. текстовые данные.
		Программа может состоять из нескольких классов, но только один из них содержит метод main().
		Все существующие реализации Java-интерпретаторов, получив команду интерпретировать класс, 
		начинают свою работу с вызова метода main. 
		*/
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				/* public - модификатор доступа, означающий, что метод run() виден и доступен любому классу.
				void ()означает, что метод run не возвращает данных в программу, которая его вызвала, 
				а просто выводит на экран строку.
				Метод run с пустыми скобками, т.е. метод не имеет аргументов(параметров)	 
				*/
				try {
		/* Для задания блока программного кода, который требуется защитить от исключений, используется ключевое слово try. 
		Сразу же после try-блока помещается блок catch, задающий тип исключения которое вы хотите обрабатывать.
		Исключение – это проблемная ситуация, возникающая по мере выполнения кода программы. Работает она так:
		1.Выполняется код внутри блока try. 2.Если в нём ошибок нет, то блок catch(err) игнорируется, то есть выполнение 
		доходит до конца try и потом прыгает через catch. 3.Если в нём возникнет ошибка, то выполнение try на ней
		 прерывается, и управление прыгает в начало блока catch(err).
		*/
					frame.setVisible(true); //устанавливаем что окно Index (параметры короба для сабвуфера) видно пользователю

				} catch (Exception e) {
					e.printStackTrace();
					/* Для задания блока программного кода, который требуется защитить от исключений, используется ключевое слово try. 
					Сразу же после try-блока помещается блок catch, задающий тип исключения которое вы хотите обрабатывать.
					Исключение – это проблемная ситуация, возникающая по мере выполнения кода программы. Работает она так:
					1.Выполняется код внутри блока try. 2.Если в нём ошибок нет, то блок catch(err) игнорируется, то есть выполнение 
					доходит до конца try и потом прыгает через catch. 3.Если в нём возникнет ошибка, то выполнение try на ней
					 прерывается, и управление прыгает в начало блока catch(err).
					*/
				}
			}
		});
	}
	
	
	private JPanel panel_0,panel, panel_1;//панели на которых располагаются поля и кнопки. Панели доступны только для данного класса (private)
	private JButton del, calc_v;// кнопка Рассчитать которая доступна только для данного класса
	private JLabel label1,label2,label3,label4, label5, label6,label7,label8,label9,label10,label11;
	// компонент на котором располагается текст
	public static JLabel label_in, label_out;
	public static JTextField in_a, in_h, in_l, in_t, out_a, out_h, out_l;
	/* текстовые поля в которые пользователь вводит данные, доступны для любого файла из пакета pack */
	public static JCheckBox in, out;// компонент флажок
	public static int int_in=0,int_out=0;//переменная типа integer, доступная любому классу
		/*static позволяет определять статические методы. Это такие методы, которые являются общими для класса, а не для
	отдельного объекта этого класса. Также они могут работать лишь со статическими полями класса.К статическим методам 
	и переменным можно обращаться через имя класса.*/
	
	
	public index() { /*Модификатор доступа public означает, что метод Index()виден и доступен любому классу.
		static означает, что не нужно создавать экземпляр(копию) объекта Index в памяти, чтобы использовать этот метод.
		Index - расположение на фрейме компонентов (панель вкладок), .*/
		setTitle("Параметры короба для сабвуфера"); //устанавливает название окна 
		setSize(640, 350); // указывает ширину (640) и высоту (350).
		setLocationRelativeTo(null);//установить посередине экрана
		
		//по закрытию формы - закрывать приложение
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        setLayout (new BorderLayout()); /*	Оператор new создает экземпляр указанного класса
	  	Метод setLayout - Вызов менеджера компоновки, который задает определенный порядок панелей в контейнере.
 		Менеджер размещения BorderLayout - тип разбивки контейнера, при котором всё пространство контейнера разбивается 
 		на пять частей. В каждой из этих частей располагается один компонент. 
 		При добавлении компонента на контейнер с BorderLayout разработчик обязательно указывает, 
 		куда именно он хочет поместить компонент.*/

        panel_0 = new JPanel();//Панель на которой  располагаются компоненты-флажки Внутренние размеры и Внешние размеры 
        panel = new JPanel();//Панель на которой  располагаются текстовые поля и поля для ввода текста
		panel_1 = new JPanel();//Панель на которой располагается кнопки очистить и рассчитать объем


		add(panel_0, BorderLayout.NORTH);//Добавление панели panel сверху
		add(panel, BorderLayout.CENTER);//Добавление панели panel по центру
		add(panel_1, BorderLayout.SOUTH);//Добавление панели panel_1 снизу

		panel_0.setBorder(new EmptyBorder(20,10,10,10));//установка внутренних отступов
		//EmptyBorder(сверху, слева, снизу, справа)
		panel.setBorder(new EmptyBorder(10,10,50,10));//установка внутренних отступов

		/* установка менеджера компоновки GridLayout. данный менеджер компоновки располагает компоненты в таблицу */
		panel_0.setLayout(new GridLayout(1,2,10,15));//на панели 1 строка,2столбца, будут расположена компоненты флажки Внутренние размеры и Внешние размеры
		panel.setLayout(new GridLayout(5,4,10,5));/* на панеле будет 5 строк, 4 столбца, расстояние между
		 столбцами 10, расстояние между строками 5 */
		panel_1.setLayout(new GridLayout(1,2));//на панели 1 строка,2столбца, будут расположены кнопки

		label1 = new JLabel("Ширина, см:", JLabel.RIGHT); // ширина внутрен. 
		label2 = new JLabel("Ширина, см:", JLabel.RIGHT);// ширина внеш.
		label3 = new JLabel("Высота, см:", JLabel.RIGHT); //внутрен.
		label4 = new JLabel("Высота, см:", JLabel.RIGHT); //внешн.
		label5 = new JLabel("Глубина, см:", JLabel.RIGHT); //внутрен
		label6 = new JLabel("Глубина, см:", JLabel.RIGHT); //внешн.
		label7 = new JLabel("Толщина материала, см:", JLabel.RIGHT);
		label8 = new JLabel("Общий объем:", JLabel.LEFT);
		label9 = new JLabel("Наружный объем:", JLabel.LEFT);
		label10 = new JLabel(); //пустой label для того чтобы оставить место после "толщина материала"
		label11 = new JLabel();//пустой label для того чтобы оставить место после "толщина материала"
		label_in = new JLabel(); // для отображения рассчитанного общего объема 
		label_out = new JLabel(); // для отображения рассчитанного наружного объема 

		label8.setForeground(Color.RED); //цвет текста label8 (общий объем) и label9(наружный объем) - красный
		label9.setForeground(Color.RED);

		/*Обозначаем что переменные Label_1,Label_2..являются объектом JLabel и указываем какой текст будет выводиться.
		JLabel.LEFT - выравнивание по левому краю,
		JLabel.CENTER - выравнивание по центру
		*/
		
		del = new JButton("Очистить"); //Компонент кнопка. В скобках - надпись на кнопке
		calc_v = new JButton("Рассчитать объем"); //В скобках - надпись на кнопке
